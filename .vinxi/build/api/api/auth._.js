import{betterAuth as p}from"better-auth";import{drizzleAdapter as f}from"better-auth/adapters/drizzle";import{neon as _}from"@neondatabase/serverless";import"dotenv/config";import{drizzle as y}from"drizzle-orm/neon-http";import{reactStartCookies as A}from"better-auth/react-start";import{relations as s}from"drizzle-orm";import{pgTable as o,text as e,integer as d,pgEnum as c,primaryKey as N,timestamp as r,boolean as m,date as l}from"drizzle-orm/pg-core";import{a as g}from"./assets/index-DGsDXB41.js";import"node:async_hooks";import"h3";let I=process.env.DATABASE_URL;const T=_(I),b=y(T),a=o("communities",{id:d().primaryKey().generatedAlwaysAsIdentity(),name:e().notNull(),description:e(),logoUrl:e("logo_url"),homeUrl:e("home_url")});s(a,({many:t})=>({usersInCommunityTable:t(i)}));const h=c("user_in_community_role",["admin","member"]),i=o("user_in_community",{userId:e("user_id").notNull().references(()=>n.id),communityId:d("community_id").notNull().references(()=>a.id),role:h().default("member")},t=>[N({columns:[t.userId,t.communityId]})]);s(i,({one:t})=>({group:t(a,{fields:[i.communityId],references:[a.id]}),user:t(n,{fields:[i.userId],references:[n.id]})}));const n=o("user",{id:e("id").primaryKey(),name:e("name").notNull(),email:e("email").notNull().unique(),emailVerified:m("email_verified").$defaultFn(()=>!1).notNull(),image:e("image"),createdAt:r("created_at").$defaultFn(()=>new Date).notNull(),updatedAt:r("updated_at").$defaultFn(()=>new Date).notNull()});s(n,({many:t})=>({usersInCommunityTable:t(i)}));const v=o("session",{id:e("id").primaryKey(),expiresAt:r("expires_at").notNull(),token:e("token").notNull().unique(),createdAt:r("created_at").notNull(),updatedAt:r("updated_at").notNull(),ipAddress:e("ip_address"),userAgent:e("user_agent"),userId:e("user_id").notNull().references(()=>n.id,{onDelete:"cascade"})}),k=o("account",{id:e("id").primaryKey(),accountId:e("account_id").notNull(),providerId:e("provider_id").notNull(),userId:e("user_id").notNull().references(()=>n.id,{onDelete:"cascade"}),accessToken:e("access_token"),refreshToken:e("refresh_token"),idToken:e("id_token"),accessTokenExpiresAt:r("access_token_expires_at"),refreshTokenExpiresAt:r("refresh_token_expires_at"),scope:e("scope"),password:e("password"),createdAt:r("created_at").notNull(),updatedAt:r("updated_at").notNull()}),x=o("verification",{id:e("id").primaryKey(),identifier:e("identifier").notNull(),value:e("value").notNull(),expiresAt:r("expires_at").notNull(),createdAt:r("created_at").$defaultFn(()=>new Date),updatedAt:r("updated_at").$defaultFn(()=>new Date)}),w=c("eventMode",["in-person","online","hybrid"]);o("events",{id:d().primaryKey().generatedAlwaysAsIdentity(),name:e().notNull(),description:e(),date:l().notNull(),dateEnd:l("date_end"),eventUrl:e("event_url"),cfpUrl:e("cfp_url"),cfpClosingDate:l("cfp_closing_date"),mode:w(),city:e(),country:e(),tags:e().array(),draft:m("draft").default(!1),communityId:d("community_id").references(()=>a.id)});const u=p({database:f(b,{provider:"pg",schema:{user:n,account:k,session:v,verification:x}}),emailAndPassword:{enabled:!0},plugins:[A()]}),q=g("/api/auth/$")({GET:({request:t})=>(console.log("Auth GET request handler called",t),u.handler(t)),POST:({request:t})=>(console.log("Auth POST request handler called",t),u.handler(t))});export{q as APIRoute};
