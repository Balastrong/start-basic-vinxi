import{getTableColumns as _,sql as d,eq as c,and as y}from"drizzle-orm";import{z as t}from"zod";import{d as m,b as i,e as n,j as b}from"./auth.schema-C-QPdDIq.js";import{u,a as v}from"./auth.api-blvfxgr-.js";import{s as x}from"./server-De-CGB3V.js";import"h3";import{c as a,a as s}from"./index-HNgfQz2a.js";import"better-auth";import"better-auth/adapters/drizzle";import"@neondatabase/serverless";import"dotenv/config";import"drizzle-orm/neon-http";import"better-auth/react-start";import"drizzle-orm/pg-core";import"@tanstack/router-core";import"node:async_hooks";const p=t.object({name:t.string().min(3).max(50),description:t.string().min(3).max(250).optional(),logoUrl:t.string().url().optional(),homeUrl:t.string().url().optional()}),h=t.object({communityId:t.number()}),g=p.extend({id:t.number()}),f=t.object({ownCommunitiesOnly:t.boolean().optional()}),F=a("src_services_community_api_ts--createCommunity_createServerFn_handler","/_server",(e,r)=>T.__executeServer(e,r)),l=e=>e?d`exists (
    select 1 from ${n}
    where ${n.userId} = ${e}
    and ${n.communityId} = ${i.id}
  )`:d`false`,j=a("src_services_community_api_ts--getCommunities_createServerFn_handler","/_server",(e,r)=>O.__executeServer(e,r)),R=a("src_services_community_api_ts--getCommunity_createServerFn_handler","/_server",(e,r)=>z.__executeServer(e,r)),$=a("src_services_community_api_ts--joinCommunity_createServerFn_handler","/_server",(e,r)=>B.__executeServer(e,r)),U=a("src_services_community_api_ts--leaveCommunity_createServerFn_handler","/_server",(e,r)=>D.__executeServer(e,r)),M=a("src_services_community_api_ts--updateCommunity_createServerFn_handler","/_server",(e,r)=>E.__executeServer(e,r)),q=a("src_services_community_api_ts--getUserRoleInCommunity_createServerFn_handler","/_server",(e,r)=>C.__executeServer(e,r)),T=s().validator(p).middleware([u]).handler(F,async({data:e,context:{userSession:r}})=>{const[o]=await m.insert(i).values(e).returning();return await m.insert(n).values({userId:r.user.id,communityId:o.id,role:"admin"}),o}),O=s().validator(f).middleware([v]).handler(j,async({data:e,context:{userSession:r}})=>{const o=r?.user?.id;return await m.select({..._(i),memberCount:d`(
          select count(*)::int
          from ${n}
          where ${n.communityId} = ${i.id}
        )`,isMember:l(o)}).from(i).where(e.ownCommunitiesOnly?l(o):void 0).orderBy(i.name)}),z=s().validator(t.object({id:t.number()})).middleware([v]).handler(R,async({data:e,context:{userSession:r}})=>{const[o]=await m.select({..._(i),isMember:l(r?.user.id)}).from(i).where(c(i.id,e.id)).limit(1);if(!o)throw new Error("Community not found");return o}),B=s().validator(h).middleware([u]).handler($,async({data:e,context:{userSession:r}})=>{await m.insert(n).values({userId:r.user.id,communityId:e.communityId})}),D=s().validator(h).middleware([u]).handler(U,async({data:e,context:{userSession:r}})=>{await m.delete(n).where(y(c(n.userId,r.user.id),c(n.communityId,e.communityId)))}),E=s().validator(g).middleware([u]).handler(M,async({data:e,context:{userSession:r}})=>{if(await C({data:{communityId:e.id}})!=="admin")throw b({message:"You are not allowed to update this community"},{status:403});const{id:w,...S}=e,[I]=await m.update(i).set(S).where(c(i.id,w)).returning();return I}),C=s().validator(t.object({communityId:t.number()})).middleware([u]).handler(q,async({data:e,context:{userSession:r}})=>{const[o]=await m.select({role:n.role}).from(n).where(y(c(n.userId,r.user.id),c(n.communityId,e.communityId))).limit(1);return!o||!o.role?(x(404),null):o.role});export{F as createCommunity_createServerFn_handler,j as getCommunities_createServerFn_handler,R as getCommunity_createServerFn_handler,q as getUserRoleInCommunity_createServerFn_handler,$ as joinCommunity_createServerFn_handler,U as leaveCommunity_createServerFn_handler,M as updateCommunity_createServerFn_handler};
