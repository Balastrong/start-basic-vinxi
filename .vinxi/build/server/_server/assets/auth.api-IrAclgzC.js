import{eq as i}from"drizzle-orm";import{a as c,U as u,c as t,d,u as s,j as m}from"./auth.schema-C-QPdDIq.js";import{c as a,a as o}from"./index-HNgfQz2a.js";import{g as p}from"./server-De-CGB3V.js";import"h3";import"better-auth";import"better-auth/adapters/drizzle";import"@neondatabase/serverless";import"dotenv/config";import"drizzle-orm/neon-http";import"better-auth/react-start";import"drizzle-orm/pg-core";import"zod";import"@tanstack/router-core";import"node:async_hooks";const l=a("src_services_auth_api_ts--getUserSession_createServerFn_handler","/_server",(r,e)=>n.__executeServer(r,e)),_=a("src_services_auth_api_ts--updateUser_createServerFn_handler","/_server",(r,e)=>v.__executeServer(r,e)),n=o({method:"GET"}).handler(l,async()=>{console.log("getUserSession called");const r=p();if(!r?.headers)return null;const e=await c.api.getSession({headers:r.headers});return console.log("User session:",e?.user.name),e}),S=t({type:"function"}).server(async({next:r})=>{const e=await n();return r({context:{userSession:e}})}),h=t({type:"function"}).middleware([S]).server(async({next:r,context:e})=>{if(!e.userSession)throw m({message:"You must be logged in to do that!"},{status:401});return r({context:{userSession:e.userSession}})}),v=o().validator(u).middleware([h]).handler(_,async({data:r,context:{userSession:e}})=>{await d.update(s).set({name:r.username}).where(i(s.id,e.user.id))});export{l as getUserSession_createServerFn_handler,_ as updateUser_createServerFn_handler};
