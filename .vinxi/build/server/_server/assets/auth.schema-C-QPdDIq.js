import{m as g}from"./index-HNgfQz2a.js";import{betterAuth as b}from"better-auth";import{drizzleAdapter as v}from"better-auth/adapters/drizzle";import{neon as A}from"@neondatabase/serverless";import"dotenv/config";import{drizzle as N}from"drizzle-orm/neon-http";import{reactStartCookies as I}from"better-auth/react-start";import{relations as f}from"drizzle-orm";import{pgTable as i,pgEnum as _,integer as m,text as e,primaryKey as T,timestamp as r,boolean as y,date as p}from"drizzle-orm/pg-core";import{z as n}from"zod";function B(t,o){return new Response(JSON.stringify(t),{...o,headers:g({"content-type":"application/json"},o?.headers)})}function c(t,o){const d=o||t||{};return{options:d,middleware:s=>c(void 0,Object.assign(d,{middleware:s})),validator:s=>c(void 0,Object.assign(d,{validator:s})),client:s=>c(void 0,Object.assign(d,{client:s})),server:s=>c(void 0,Object.assign(d,{server:s}))}}let w=process.env.DATABASE_URL;const h=A(w),k=N(h),u=i("communities",{id:m().primaryKey().generatedAlwaysAsIdentity(),name:e().notNull(),description:e(),logoUrl:e("logo_url"),homeUrl:e("home_url")});f(u,({many:t})=>({usersInCommunityTable:t(l)}));const x=_("user_in_community_role",["admin","member"]),l=i("user_in_community",{userId:e("user_id").notNull().references(()=>a.id),communityId:m("community_id").notNull().references(()=>u.id),role:x().default("member")},t=>[T({columns:[t.userId,t.communityId]})]);f(l,({one:t})=>({group:t(u,{fields:[l.communityId],references:[u.id]}),user:t(a,{fields:[l.userId],references:[a.id]})}));const a=i("user",{id:e("id").primaryKey(),name:e("name").notNull(),email:e("email").notNull().unique(),emailVerified:y("email_verified").$defaultFn(()=>!1).notNull(),image:e("image"),createdAt:r("created_at").$defaultFn(()=>new Date).notNull(),updatedAt:r("updated_at").$defaultFn(()=>new Date).notNull()});f(a,({many:t})=>({usersInCommunityTable:t(l)}));const j=i("session",{id:e("id").primaryKey(),expiresAt:r("expires_at").notNull(),token:e("token").notNull().unique(),createdAt:r("created_at").notNull(),updatedAt:r("updated_at").notNull(),ipAddress:e("ip_address"),userAgent:e("user_agent"),userId:e("user_id").notNull().references(()=>a.id,{onDelete:"cascade"})}),D=i("account",{id:e("id").primaryKey(),accountId:e("account_id").notNull(),providerId:e("provider_id").notNull(),userId:e("user_id").notNull().references(()=>a.id,{onDelete:"cascade"}),accessToken:e("access_token"),refreshToken:e("refresh_token"),idToken:e("id_token"),accessTokenExpiresAt:r("access_token_expires_at"),refreshTokenExpiresAt:r("refresh_token_expires_at"),scope:e("scope"),password:e("password"),createdAt:r("created_at").notNull(),updatedAt:r("updated_at").notNull()}),K=i("verification",{id:e("id").primaryKey(),identifier:e("identifier").notNull(),value:e("value").notNull(),expiresAt:r("expires_at").notNull(),createdAt:r("created_at").$defaultFn(()=>new Date),updatedAt:r("updated_at").$defaultFn(()=>new Date)}),U=_("eventMode",["in-person","online","hybrid"]),H=i("events",{id:m().primaryKey().generatedAlwaysAsIdentity(),name:e().notNull(),description:e(),date:p().notNull(),dateEnd:p("date_end"),eventUrl:e("event_url"),cfpUrl:e("cfp_url"),cfpClosingDate:p("cfp_closing_date"),mode:U(),city:e(),country:e(),tags:e().array(),draft:y("draft").default(!1),communityId:m("community_id").references(()=>u.id)}),J=b({database:v(k,{provider:"pg",schema:{user:a,account:D,session:j,verification:K}}),emailAndPassword:{enabled:!0},plugins:[I()]}),C=n.object({username:n.string().min(3).max(20)});n.object({username:C.shape.username,email:n.string().email(),password:n.string().min(8),confirmPassword:n.string()});n.object({email:n.string().email(),password:n.string()});export{C as U,J as a,u as b,c,k as d,l as e,H as f,B as j,a as u};
