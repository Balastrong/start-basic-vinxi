import{eq as i,ilike as g,inArray as y,arrayOverlaps as _,gt as c,or as w,and as p}from"drizzle-orm";import{z as r}from"zod";import{f as n,d as o,e as l}from"./auth.schema-C-QPdDIq.js";import{u as E}from"./auth.api-blvfxgr-.js";import{c as d,a as h}from"./index-HNgfQz2a.js";import"better-auth";import"better-auth/adapters/drizzle";import"@neondatabase/serverless";import"dotenv/config";import"drizzle-orm/neon-http";import"better-auth/react-start";import"drizzle-orm/pg-core";import"./server-De-CGB3V.js";import"@tanstack/router-core";import"node:async_hooks";import"h3";const v=r.union([r.literal("in-person"),r.literal("hybrid"),r.literal("online")]);v.options.map(e=>e.value);const S=r.object({query:r.string().transform(e=>e||void 0),tags:r.array(r.string()).transform(e=>e?.length?e:void 0),modes:r.array(v).transform(e=>e?.length?e:void 0),country:r.string(),hasCfpOpen:r.boolean().transform(e=>e||void 0),communityId:r.number().nullish(),communityDraft:r.boolean().nullish(),startDate:r.string().date().nullish()}).partial(),I=r.object({id:r.number().optional(),name:r.string().min(1).max(100),description:r.string().min(1).max(1e3),eventUrl:r.string().url().nullish(),date:r.string().date(),dateEnd:r.string().date().nullish(),cfpUrl:r.string().url().nullish(),mode:v,country:r.string().nullish(),city:r.string().nullish(),cfpClosingDate:r.string().date().nullish(),tags:r.array(r.string()).min(1),communityId:r.number().nullish(),draft:r.boolean().nullish()}),b=d("src_services_event_api_ts--getEvents_createServerFn_handler","/_server",(e,t)=>F.__executeServer(e,t)),D=d("src_services_event_api_ts--getEvent_createServerFn_handler","/_server",(e,t)=>x.__executeServer(e,t)),C=d("src_services_event_api_ts--upsertEvent_createServerFn_handler","/_server",(e,t)=>q.__executeServer(e,t)),F=h().validator(S).handler(b,async({data:e})=>{const t=[];e.communityDraft==null?t.push(i(n.draft,!1)):t.push(i(n.draft,e.communityDraft)),e.query&&t.push(g(n.name,`%${e.query}%`)),e.modes&&e.modes.length>0&&t.push(y(n.mode,e.modes)),e.tags&&e.tags.length>0&&t.push(_(n.tags,e.tags)),e.country&&t.push(i(n.country,e.country)),e.hasCfpOpen&&t.push(c(n.cfpClosingDate,new Date().toISOString())),e.communityId&&t.push(i(n.communityId,e.communityId)),e.startDate&&t.push(w(c(n.date,e.startDate),c(n.dateEnd,e.startDate)));const a=t.length>0?p(...t):void 0;return await o.select().from(n).where(a).orderBy(n.date)}),x=h().validator(r.object({id:r.number()})).handler(D,async({data:e})=>{const[t]=await o.select().from(n).where(i(n.id,e.id));return t}),q=h().validator(I).middleware([E]).handler(C,async({data:e,context:{userSession:t}})=>{const{id:a,...m}=e;if(a==null){const[s]=await o.insert(n).values(m).returning();return s}else{const[s]=await o.select().from(n).where(i(n.id,a));if(!s)throw new Error("Event not found");const u=()=>{throw new Error("You can only edit events from your community!")};if(!s.communityId||(await o.select().from(l).where(p(i(l.userId,t.user.id),i(l.communityId,s.communityId)))).length===0||m.communityId!==s.communityId)throw u();const[f]=await o.update(n).set(m).where(i(n.id,a)).returning();return f}});export{D as getEvent_createServerFn_handler,b as getEvents_createServerFn_handler,C as upsertEvent_createServerFn_handler};
